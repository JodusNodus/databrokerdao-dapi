/* GENERATED BY TYPECHAIN VER. 0.1.4 */
/* tslint:disable */

import { BigNumber } from 'bignumber.js'
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper,
} from './typechain-runtime'

export class Token extends TypeChainContract {
  public readonly rawWeb3Contract: any

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [],
        name: 'name',
        outputs: [{ name: '', type: 'bytes32' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [],
        name: 'totalSupply',
        outputs: [{ name: '', type: 'uint256' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [],
        name: 'decimals',
        outputs: [{ name: '', type: 'uint8' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [],
        name: 'metadata',
        outputs: [{ name: '', type: 'string' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [],
        name: 'gateKeeper',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [],
        name: 'BURN_ROLE',
        outputs: [{ name: '', type: 'bytes32' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [],
        name: 'getIndexLength',
        outputs: [{ name: 'length', type: 'uint256' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [],
        name: 'MINT_ROLE',
        outputs: [{ name: '', type: 'bytes32' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [],
        name: 'UPDATE_METADATA_ROLE',
        outputs: [{ name: '', type: 'bytes32' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        inputs: [
          { name: '_name', type: 'bytes32' },
          { name: '_decimals', type: 'uint8' },
          { name: '_registry', type: 'address' },
          { name: '_gateKeeper', type: 'address' },
        ],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'constructor',
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: 'from', type: 'address' },
          { indexed: true, name: 'to', type: 'address' },
          { indexed: false, name: 'value', type: 'uint256' },
        ],
        name: 'Transfer',
        type: 'event',
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: 'from', type: 'address' },
          { indexed: true, name: 'to', type: 'address' },
          { indexed: false, name: 'data', type: 'bytes' },
        ],
        name: 'TransferData',
        type: 'event',
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: 'to', type: 'address' },
          { indexed: false, name: 'amount', type: 'uint256' },
        ],
        name: 'Mint',
        type: 'event',
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: 'from', type: 'address' },
          { indexed: false, name: 'amount', type: 'uint256' },
        ],
        name: 'Burn',
        type: 'event',
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: 'owner', type: 'address' },
          { indexed: true, name: 'spender', type: 'address' },
          { indexed: false, name: 'value', type: 'uint256' },
        ],
        name: 'Approval',
        type: 'event',
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: 'key', type: 'address' }],
        name: 'AddressCacheInvalidated',
        type: 'event',
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: 'key', type: 'bytes32' }],
        name: 'Bytes32CacheInvalidated',
        type: 'event',
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: 'key', type: 'uint256' }],
        name: 'Uint256CacheInvalidated',
        type: 'event',
      },
      {
        constant: false,
        inputs: [
          { name: '_to', type: 'address' },
          { name: '_amount', type: 'uint256' },
        ],
        name: 'mint',
        outputs: [{ name: 'success', type: 'bool' }],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          { name: '_roleRegistryAddress', type: 'address' },
          { name: '_amount', type: 'uint256' },
        ],
        name: 'mintToRoleRegistry',
        outputs: [{ name: 'success', type: 'bool' }],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          { name: '_from', type: 'address' },
          { name: '_amount', type: 'uint256' },
        ],
        name: 'burn',
        outputs: [{ name: 'success', type: 'bool' }],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          { name: '_roleRegistryAddress', type: 'address' },
          { name: '_amount', type: 'uint256' },
        ],
        name: 'burnFromRoleRegistry',
        outputs: [{ name: 'success', type: 'bool' }],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          { name: '_to', type: 'address' },
          { name: '_value', type: 'uint256' },
        ],
        name: 'transfer',
        outputs: [{ name: 'success', type: 'bool' }],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          { name: '_to', type: 'address' },
          { name: '_value', type: 'uint256' },
          { name: '_data', type: 'bytes' },
        ],
        name: 'transferWithData',
        outputs: [{ name: 'success', type: 'bool' }],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          { name: '_from', type: 'address' },
          { name: '_to', type: 'address' },
          { name: '_value', type: 'uint256' },
        ],
        name: 'transferFrom',
        outputs: [{ name: 'success', type: 'bool' }],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          { name: '_from', type: 'address' },
          { name: '_to', type: 'address' },
          { name: '_value', type: 'uint256' },
          { name: '_data', type: 'bytes' },
        ],
        name: 'transferFromWithData',
        outputs: [{ name: 'success', type: 'bool' }],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          { name: '_spender', type: 'address' },
          { name: '_value', type: 'uint256' },
        ],
        name: 'approve',
        outputs: [{ name: '', type: 'bool' }],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: true,
        inputs: [
          { name: '_owner', type: 'address' },
          { name: '_spender', type: 'address' },
        ],
        name: 'allowance',
        outputs: [{ name: 'remaining', type: 'uint256' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          { name: '_spender', type: 'address' },
          { name: '_addedValue', type: 'uint256' },
        ],
        name: 'increaseApproval',
        outputs: [{ name: 'success', type: 'bool' }],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          { name: '_spender', type: 'address' },
          { name: '_subtractedValue', type: 'uint256' },
        ],
        name: 'decreaseApproval',
        outputs: [{ name: 'success', type: 'bool' }],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: true,
        inputs: [{ name: '_owner', type: 'address' }],
        name: 'balanceOf',
        outputs: [{ name: 'balance', type: 'uint256' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          { name: '_cachedAddress', type: 'address' },
          { name: '', type: 'bytes32' },
          { name: '', type: 'uint256' },
        ],
        name: 'invalidateCache',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [{ name: 'ipfsHash', type: 'string' }],
        name: 'updateMetaData',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
    ]
    super(web3, address, abi)
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<Token> {
    const contract = new Token(web3, address)
    const code = await promisify(web3.eth.getCode, [address])
    if (code === '0x0') {
      throw new Error(`Contract at ${address} doesn't exist!`)
    }
    return contract
  }

  public get name(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.name, [])
  }
  public get totalSupply(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.totalSupply, [])
  }
  public get decimals(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.decimals, [])
  }
  public get metadata(): Promise<string> {
    return promisify(this.rawWeb3Contract.metadata, [])
  }
  public get gateKeeper(): Promise<string> {
    return promisify(this.rawWeb3Contract.gateKeeper, [])
  }
  public get BURN_ROLE(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.BURN_ROLE, [])
  }
  public get getIndexLength(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.getIndexLength, [])
  }
  public get MINT_ROLE(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.MINT_ROLE, [])
  }
  public get UPDATE_METADATA_ROLE(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.UPDATE_METADATA_ROLE, [])
  }
  public allowance(
    _owner: BigNumber | string,
    _spender: BigNumber | string
  ): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.allowance, [
      _owner.toString(),
      _spender.toString(),
    ])
  }
  public balanceOf(_owner: BigNumber | string): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.balanceOf, [_owner.toString()])
  }

  public mintTx(
    _to: BigNumber | string,
    _amount: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'mint', [
      _to.toString(),
      _amount.toString(),
    ])
  }
  public mintToRoleRegistryTx(
    _roleRegistryAddress: BigNumber | string,
    _amount: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      'mintToRoleRegistry',
      [_roleRegistryAddress.toString(), _amount.toString()]
    )
  }
  public burnTx(
    _from: BigNumber | string,
    _amount: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'burn', [
      _from.toString(),
      _amount.toString(),
    ])
  }
  public burnFromRoleRegistryTx(
    _roleRegistryAddress: BigNumber | string,
    _amount: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      'burnFromRoleRegistry',
      [_roleRegistryAddress.toString(), _amount.toString()]
    )
  }
  public transferTx(
    _to: BigNumber | string,
    _value: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'transfer', [
      _to.toString(),
      _value.toString(),
    ])
  }
  public transferWithDataTx(
    _to: BigNumber | string,
    _value: BigNumber | number,
    _data: BigNumber[]
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'transferWithData', [
      _to.toString(),
      _value.toString(),
      _data.toString(),
    ])
  }
  public transferFromTx(
    _from: BigNumber | string,
    _to: BigNumber | string,
    _value: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'transferFrom', [
      _from.toString(),
      _to.toString(),
      _value.toString(),
    ])
  }
  public transferFromWithDataTx(
    _from: BigNumber | string,
    _to: BigNumber | string,
    _value: BigNumber | number,
    _data: BigNumber[]
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      'transferFromWithData',
      [_from.toString(), _to.toString(), _value.toString(), _data.toString()]
    )
  }
  public approveTx(
    _spender: BigNumber | string,
    _value: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'approve', [
      _spender.toString(),
      _value.toString(),
    ])
  }
  public increaseApprovalTx(
    _spender: BigNumber | string,
    _addedValue: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'increaseApproval', [
      _spender.toString(),
      _addedValue.toString(),
    ])
  }
  public decreaseApprovalTx(
    _spender: BigNumber | string,
    _subtractedValue: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'decreaseApproval', [
      _spender.toString(),
      _subtractedValue.toString(),
    ])
  }
  public invalidateCacheTx(
    _cachedAddress: BigNumber | string,
    arg1: BigNumber,
    arg2: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'invalidateCache', [
      _cachedAddress.toString(),
      arg1.toString(),
      arg2.toString(),
    ])
  }
  public updateMetaDataTx(
    ipfsHash: string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'updateMetaData', [
      ipfsHash.toString(),
    ])
  }
}
