/* GENERATED BY TYPECHAIN VER. 0.1.4 */
/* tslint:disable */

import { BigNumber } from 'bignumber.js'
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper,
} from './typechain-runtime'

export class PurchaseRegistry extends TypeChainContract {
  public readonly rawWeb3Contract: any

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [],
        name: 'CREATE_PERMISSIONS_ROLE',
        outputs: [{ name: '', type: 'bytes32' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [],
        name: 'gateKeeper',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [{ name: '', type: 'address' }],
        name: 'purchases',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [{ name: '', type: 'uint256' }],
        name: 'purchasesIndex',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [],
        name: 'token',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        inputs: [
          { name: '_gateKeeper', type: 'address' },
          { name: '_token', type: 'address' },
          { name: '_streamRegistry', type: 'address' },
        ],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'constructor',
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: 'stream', type: 'address' },
          { indexed: false, name: 'user', type: 'address' },
          { indexed: false, name: 'startTime', type: 'uint256' },
          { indexed: false, name: 'endTime', type: 'uint256' },
          { indexed: false, name: 'price', type: 'uint256' },
          { indexed: false, name: 'purchase', type: 'address' },
        ],
        name: 'AccessPurchased',
        type: 'event',
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: 'key', type: 'address' }],
        name: 'AddressCacheInvalidated',
        type: 'event',
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: 'key', type: 'bytes32' }],
        name: 'Bytes32CacheInvalidated',
        type: 'event',
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: 'key', type: 'uint256' }],
        name: 'Uint256CacheInvalidated',
        type: 'event',
      },
      {
        constant: false,
        inputs: [
          { name: '_stream', type: 'address' },
          { name: '_endTime', type: 'uint256' },
          { name: '_metadata', type: 'string' },
        ],
        name: 'purchaseAccess',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [{ name: '_salePercentage', type: 'uint256' }],
        name: 'setSalePercentage',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: true,
        inputs: [],
        name: 'getIndexLength',
        outputs: [{ name: 'length', type: 'uint256' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [{ name: 'index', type: 'uint256' }],
        name: 'getByIndex',
        outputs: [
          { name: 'key', type: 'address' },
          { name: 'contractAddress', type: 'address' },
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [{ name: '_key', type: 'address' }],
        name: 'getByKey',
        outputs: [
          { name: 'key', type: 'address' },
          { name: 'contractAddress', type: 'address' },
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          { name: '', type: 'address' },
          { name: '_cachedBytes32', type: 'bytes32' },
          { name: '', type: 'uint256' },
        ],
        name: 'invalidateCache',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
    ]
    super(web3, address, abi)
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<PurchaseRegistry> {
    const contract = new PurchaseRegistry(web3, address)
    const code = await promisify(web3.eth.getCode, [address])
    if (code === '0x0') {
      throw new Error(`Contract at ${address} doesn't exist!`)
    }
    return contract
  }

  public get CREATE_PERMISSIONS_ROLE(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.CREATE_PERMISSIONS_ROLE, [])
  }
  public get gateKeeper(): Promise<string> {
    return promisify(this.rawWeb3Contract.gateKeeper, [])
  }
  public get token(): Promise<string> {
    return promisify(this.rawWeb3Contract.token, [])
  }
  public get getIndexLength(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.getIndexLength, [])
  }
  public purchases(arg0: BigNumber | string): Promise<string> {
    return promisify(this.rawWeb3Contract.purchases, [arg0.toString()])
  }
  public purchasesIndex(arg0: BigNumber | number): Promise<string> {
    return promisify(this.rawWeb3Contract.purchasesIndex, [arg0.toString()])
  }
  public getByIndex(index: BigNumber | number): Promise<[string, string]> {
    return promisify(this.rawWeb3Contract.getByIndex, [index.toString()])
  }
  public getByKey(_key: BigNumber | string): Promise<[string, string]> {
    return promisify(this.rawWeb3Contract.getByKey, [_key.toString()])
  }

  public purchaseAccessTx(
    _stream: BigNumber | string,
    _endTime: BigNumber | number,
    _metadata: string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'purchaseAccess', [
      _stream.toString(),
      _endTime.toString(),
      _metadata.toString(),
    ])
  }
  public setSalePercentageTx(
    _salePercentage: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      'setSalePercentage',
      [_salePercentage.toString()]
    )
  }
  public invalidateCacheTx(
    arg0: BigNumber | string,
    _cachedBytes32: BigNumber,
    arg2: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'invalidateCache', [
      arg0.toString(),
      _cachedBytes32.toString(),
      arg2.toString(),
    ])
  }
}
