/* GENERATED BY TYPECHAIN VER. 0.1.4 */
/* tslint:disable */

import { BigNumber } from 'bignumber.js'
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper,
} from './typechain-runtime'

export class TokenCuratedRegistry extends TypeChainContract {
  public readonly rawWeb3Contract: any

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [],
        name: 'WITHDRAW_FUNDS_ROLE',
        outputs: [{ name: '', type: 'bytes32' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [],
        name: 'CURATE_CHALLENGE_ROLE',
        outputs: [{ name: '', type: 'bytes32' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [],
        name: 'gateKeeper',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [{ name: '', type: 'address' }],
        name: 'listings',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [{ name: '', type: 'uint256' }],
        name: 'challenges',
        outputs: [
          { name: 'challenger', type: 'address' },
          { name: 'resolved', type: 'bool' },
          { name: 'stake', type: 'uint256' },
          { name: 'listing', type: 'address' },
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [],
        name: 'token',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [],
        name: 'listingFactory',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        inputs: [
          { name: '_gateKeeper', type: 'address' },
          { name: '_token', type: 'address' },
          { name: '_listingFactory', type: 'address' },
          { name: '_minEnlistAmount', type: 'uint256' },
          { name: '_minChallengeAmount', type: 'uint256' },
          { name: '_adminPercentage', type: 'uint256' },
        ],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'constructor',
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: 'listing', type: 'address' },
          { indexed: false, name: 'stake', type: 'uint256' },
          { indexed: false, name: 'price', type: 'uint256' },
        ],
        name: 'Enlisted',
        type: 'event',
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: 'listing', type: 'address' },
          { indexed: false, name: 'stake', type: 'uint256' },
          { indexed: false, name: 'challengeID', type: 'uint256' },
        ],
        name: 'Challenged',
        type: 'event',
      },
      {
        anonymous: false,
        inputs: [{ indexed: false, name: 'listing', type: 'address' }],
        name: 'Unlisted',
        type: 'event',
      },
      {
        anonymous: false,
        inputs: [{ indexed: false, name: 'listing', type: 'address' }],
        name: 'ChallengeApproved',
        type: 'event',
      },
      {
        anonymous: false,
        inputs: [{ indexed: false, name: 'listing', type: 'address' }],
        name: 'ChallengeDenied',
        type: 'event',
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: 'listing', type: 'address' },
          { indexed: false, name: 'increasedBy', type: 'uint256' },
          { indexed: false, name: 'newStake', type: 'uint256' },
        ],
        name: 'Increased',
        type: 'event',
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: 'listing', type: 'address' },
          { indexed: false, name: 'decreasedBy', type: 'uint256' },
          { indexed: false, name: 'newStake', type: 'uint256' },
        ],
        name: 'Decreased',
        type: 'event',
      },
      {
        anonymous: false,
        inputs: [
          { indexed: false, name: 'by', type: 'address' },
          { indexed: false, name: 'balance', type: 'uint256' },
        ],
        name: 'Withdrawn',
        type: 'event',
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: 'key', type: 'address' }],
        name: 'AddressCacheInvalidated',
        type: 'event',
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: 'key', type: 'bytes32' }],
        name: 'Bytes32CacheInvalidated',
        type: 'event',
      },
      {
        anonymous: false,
        inputs: [{ indexed: true, name: 'key', type: 'uint256' }],
        name: 'Uint256CacheInvalidated',
        type: 'event',
      },
      {
        constant: false,
        inputs: [
          { name: '_stakeAmount', type: 'uint256' },
          { name: '_price', type: 'uint256' },
          { name: '_metadata', type: 'string' },
        ],
        name: 'enlist',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [{ name: '_listing', type: 'address' }],
        name: 'addListing',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [{ name: '_listing', type: 'address' }],
        name: 'unlist',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          { name: '_listing', type: 'address' },
          { name: '_stakeAmount', type: 'uint256' },
        ],
        name: 'increase',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          { name: '_listing', type: 'address' },
          { name: '_stakeAmount', type: 'uint256' },
        ],
        name: 'decrease',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          { name: '_listing', type: 'address' },
          { name: '_stakeAmount', type: 'uint256' },
        ],
        name: 'challenge',
        outputs: [{ name: 'challengeID', type: 'uint256' }],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [{ name: '_listing', type: 'address' }],
        name: 'approveChallenge',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [{ name: '_listing', type: 'address' }],
        name: 'denyChallenge',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [],
        name: 'withdraw',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          { name: '_listing', type: 'address' },
          { name: '_price', type: 'uint256' },
        ],
        name: 'setListingPrice',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [{ name: '_minEnlistAmount', type: 'uint256' }],
        name: 'setMinEnlistAmount',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [{ name: '_minChallengeAmount', type: 'uint256' }],
        name: 'setMinChallengeAmount',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [{ name: '_adminPercentage', type: 'uint256' }],
        name: 'setAdminPercentage',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: true,
        inputs: [{ name: '_listing', type: 'address' }],
        name: 'isWhitelisted',
        outputs: [{ name: 'whitelisted', type: 'bool' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [{ name: '_listing', type: 'address' }],
        name: 'challengeExists',
        outputs: [{ name: 'exists', type: 'bool' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          { name: '_cachedAddress', type: 'address' },
          { name: '', type: 'bytes32' },
          { name: '', type: 'uint256' },
        ],
        name: 'invalidateCache',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: true,
        inputs: [],
        name: 'getIndexLength',
        outputs: [{ name: 'length', type: 'uint256' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [{ name: 'index', type: 'uint256' }],
        name: 'getByIndex',
        outputs: [
          { name: 'key', type: 'address' },
          { name: 'contractAddress', type: 'address' },
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [{ name: '_key', type: 'address' }],
        name: 'getByKey',
        outputs: [
          { name: 'key', type: 'address' },
          { name: 'contractAddress', type: 'address' },
        ],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
    ]
    super(web3, address, abi)
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<TokenCuratedRegistry> {
    const contract = new TokenCuratedRegistry(web3, address)
    const code = await promisify(web3.eth.getCode, [address])
    if (code === '0x0') {
      throw new Error(`Contract at ${address} doesn't exist!`)
    }
    return contract
  }

  public get WITHDRAW_FUNDS_ROLE(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.WITHDRAW_FUNDS_ROLE, [])
  }
  public get CURATE_CHALLENGE_ROLE(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.CURATE_CHALLENGE_ROLE, [])
  }
  public get gateKeeper(): Promise<string> {
    return promisify(this.rawWeb3Contract.gateKeeper, [])
  }
  public get token(): Promise<string> {
    return promisify(this.rawWeb3Contract.token, [])
  }
  public get listingFactory(): Promise<string> {
    return promisify(this.rawWeb3Contract.listingFactory, [])
  }
  public get getIndexLength(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.getIndexLength, [])
  }
  public listings(arg0: BigNumber | string): Promise<string> {
    return promisify(this.rawWeb3Contract.listings, [arg0.toString()])
  }
  public challenges(
    arg0: BigNumber | number
  ): Promise<[string, boolean, BigNumber, string]> {
    return promisify(this.rawWeb3Contract.challenges, [arg0.toString()])
  }
  public isWhitelisted(_listing: BigNumber | string): Promise<boolean> {
    return promisify(this.rawWeb3Contract.isWhitelisted, [_listing.toString()])
  }
  public challengeExists(_listing: BigNumber | string): Promise<boolean> {
    return promisify(this.rawWeb3Contract.challengeExists, [
      _listing.toString(),
    ])
  }
  public getByIndex(index: BigNumber | number): Promise<[string, string]> {
    return promisify(this.rawWeb3Contract.getByIndex, [index.toString()])
  }
  public getByKey(_key: BigNumber | string): Promise<[string, string]> {
    return promisify(this.rawWeb3Contract.getByKey, [_key.toString()])
  }

  public enlistTx(
    _stakeAmount: BigNumber | number,
    _price: BigNumber | number,
    _metadata: string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'enlist', [
      _stakeAmount.toString(),
      _price.toString(),
      _metadata.toString(),
    ])
  }
  public addListingTx(
    _listing: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'addListing', [
      _listing.toString(),
    ])
  }
  public unlistTx(
    _listing: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'unlist', [
      _listing.toString(),
    ])
  }
  public increaseTx(
    _listing: BigNumber | string,
    _stakeAmount: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'increase', [
      _listing.toString(),
      _stakeAmount.toString(),
    ])
  }
  public decreaseTx(
    _listing: BigNumber | string,
    _stakeAmount: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'decrease', [
      _listing.toString(),
      _stakeAmount.toString(),
    ])
  }
  public challengeTx(
    _listing: BigNumber | string,
    _stakeAmount: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'challenge', [
      _listing.toString(),
      _stakeAmount.toString(),
    ])
  }
  public approveChallengeTx(
    _listing: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'approveChallenge', [
      _listing.toString(),
    ])
  }
  public denyChallengeTx(
    _listing: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'denyChallenge', [
      _listing.toString(),
    ])
  }
  public withdrawTx(): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'withdraw', [])
  }
  public setListingPriceTx(
    _listing: BigNumber | string,
    _price: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'setListingPrice', [
      _listing.toString(),
      _price.toString(),
    ])
  }
  public setMinEnlistAmountTx(
    _minEnlistAmount: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      'setMinEnlistAmount',
      [_minEnlistAmount.toString()]
    )
  }
  public setMinChallengeAmountTx(
    _minChallengeAmount: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      'setMinChallengeAmount',
      [_minChallengeAmount.toString()]
    )
  }
  public setAdminPercentageTx(
    _adminPercentage: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      'setAdminPercentage',
      [_adminPercentage.toString()]
    )
  }
  public invalidateCacheTx(
    _cachedAddress: BigNumber | string,
    arg1: BigNumber,
    arg2: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'invalidateCache', [
      _cachedAddress.toString(),
      arg1.toString(),
      arg2.toString(),
    ])
  }
}
