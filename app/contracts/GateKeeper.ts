/* GENERATED BY TYPECHAIN VER. 0.1.4 */
/* tslint:disable */

import { BigNumber } from 'bignumber.js'
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper,
} from './typechain-runtime'

export class GateKeeper extends TypeChainContract {
  public readonly rawWeb3Contract: any

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [],
        name: 'CREATE_PERMISSIONS_ROLE',
        outputs: [{ name: '', type: 'bytes32' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [],
        name: 'ADD_ROLEREGISTRY_ROLE',
        outputs: [{ name: '', type: 'bytes32' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        inputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'constructor',
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: 'entity', type: 'address' },
          { indexed: true, name: 'contractAddress', type: 'address' },
          { indexed: true, name: 'role', type: 'bytes32' },
          { indexed: false, name: 'allowed', type: 'bool' },
        ],
        name: 'SetPermission',
        type: 'event',
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: 'contractAddress', type: 'address' },
          { indexed: true, name: 'role', type: 'bytes32' },
          { indexed: true, name: 'manager', type: 'address' },
        ],
        name: 'ChangePermissionManager',
        type: 'event',
      },
      {
        constant: false,
        inputs: [{ name: 'roleRegisty', type: 'address' }],
        name: 'addRoleRegistry',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          { name: '_entity', type: 'address' },
          { name: '_contract', type: 'address' },
          { name: '_role', type: 'bytes32' },
          { name: '_manager', type: 'address' },
        ],
        name: 'createPermission',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          { name: '_entity', type: 'address' },
          { name: '_contract', type: 'address' },
          { name: '_role', type: 'bytes32' },
        ],
        name: 'grantPermission',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          { name: '_entity', type: 'address' },
          { name: '_contract', type: 'address' },
          { name: '_role', type: 'bytes32' },
        ],
        name: 'revokePermission',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: false,
        inputs: [
          { name: '_newManager', type: 'address' },
          { name: '_contract', type: 'address' },
          { name: '_role', type: 'bytes32' },
        ],
        name: 'setPermissionManager',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
      {
        constant: true,
        inputs: [
          { name: '_contract', type: 'address' },
          { name: '_role', type: 'bytes32' },
        ],
        name: 'getPermissionManager',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        constant: true,
        inputs: [
          { name: '_entity', type: 'address' },
          { name: '_contract', type: 'address' },
          { name: '_role', type: 'bytes32' },
        ],
        name: 'hasPermission',
        outputs: [{ name: '', type: 'bool' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
    ]
    super(web3, address, abi)
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<GateKeeper> {
    const contract = new GateKeeper(web3, address)
    const code = await promisify(web3.eth.getCode, [address])
    if (code === '0x0') {
      throw new Error(`Contract at ${address} doesn't exist!`)
    }
    return contract
  }

  public get CREATE_PERMISSIONS_ROLE(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.CREATE_PERMISSIONS_ROLE, [])
  }
  public get ADD_ROLEREGISTRY_ROLE(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.ADD_ROLEREGISTRY_ROLE, [])
  }
  public getPermissionManager(
    _contract: BigNumber | string,
    _role: BigNumber
  ): Promise<string> {
    return promisify(this.rawWeb3Contract.getPermissionManager, [
      _contract.toString(),
      _role.toString(),
    ])
  }
  public hasPermission(
    _entity: BigNumber | string,
    _contract: BigNumber | string,
    _role: BigNumber
  ): Promise<boolean> {
    return promisify(this.rawWeb3Contract.hasPermission, [
      _entity.toString(),
      _contract.toString(),
      _role.toString(),
    ])
  }

  public addRoleRegistryTx(
    roleRegisty: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'addRoleRegistry', [
      roleRegisty.toString(),
    ])
  }
  public createPermissionTx(
    _entity: BigNumber | string,
    _contract: BigNumber | string,
    _role: BigNumber,
    _manager: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'createPermission', [
      _entity.toString(),
      _contract.toString(),
      _role.toString(),
      _manager.toString(),
    ])
  }
  public grantPermissionTx(
    _entity: BigNumber | string,
    _contract: BigNumber | string,
    _role: BigNumber
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'grantPermission', [
      _entity.toString(),
      _contract.toString(),
      _role.toString(),
    ])
  }
  public revokePermissionTx(
    _entity: BigNumber | string,
    _contract: BigNumber | string,
    _role: BigNumber
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'revokePermission', [
      _entity.toString(),
      _contract.toString(),
      _role.toString(),
    ])
  }
  public setPermissionManagerTx(
    _newManager: BigNumber | string,
    _contract: BigNumber | string,
    _role: BigNumber
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      'setPermissionManager',
      [_newManager.toString(), _contract.toString(), _role.toString()]
    )
  }
}
