/* GENERATED BY TYPECHAIN VER. 0.1.4 */
/* tslint:disable */

import { BigNumber } from 'bignumber.js'
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper,
} from './typechain-runtime'

export class IListingFactory extends TypeChainContract {
  public readonly rawWeb3Contract: any

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [],
        name: 'gateKeeper',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
      },
      {
        inputs: [{ name: '_gateKeeper', type: 'address' }],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'constructor',
      },
      {
        anonymous: false,
        inputs: [{ indexed: false, name: '_address', type: 'address' }],
        name: 'ListingCreated',
        type: 'event',
      },
      {
        constant: false,
        inputs: [
          { name: '_owner', type: 'address' },
          { name: '_price', type: 'uint256' },
          { name: '_stakeAmount', type: 'uint256' },
          { name: '_tcr', type: 'address' },
          { name: '_metadata', type: 'string' },
        ],
        name: 'createListing',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
      },
    ]
    super(web3, address, abi)
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<IListingFactory> {
    const contract = new IListingFactory(web3, address)
    const code = await promisify(web3.eth.getCode, [address])
    if (code === '0x0') {
      throw new Error(`Contract at ${address} doesn't exist!`)
    }
    return contract
  }

  public get gateKeeper(): Promise<string> {
    return promisify(this.rawWeb3Contract.gateKeeper, [])
  }

  public createListingTx(
    _owner: BigNumber | string,
    _price: BigNumber | number,
    _stakeAmount: BigNumber | number,
    _tcr: BigNumber | string,
    _metadata: string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, 'createListing', [
      _owner.toString(),
      _price.toString(),
      _stakeAmount.toString(),
      _tcr.toString(),
      _metadata.toString(),
    ])
  }
}
